When would you want to use a remote repository rather than keeping all your work
local?

    I could use a remote repository when I work on a project with other people,
    and we would want to easily share our work by using that repository.
    Or just to make a backup of the projects I am working on.w

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Maybe there are some files that I don't want to share publicly on the
    remote repository since I haven't finished working on them. It makes it
    also possible to work off-line and pulling/pushing commits on demand.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is a clone on Git Hub's servers.
    A clone can be a fork, or just a clone from a remote repository: it is a
    copy of that repository.
    A branch is part of a repository. It is for instance a feature you are
    working on, while on the master branch you have a working version of the
    program.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can still work on the project locally without being online. You still
    have the location of the last remote commit you pulled, so when you are
    back online, you can fetch the changes in the remote without altering the
    offline work you did. Eventually, you can do a git merge with the updated
    copy of the remote and the work you did.
    Note : in this case doing git fetch and then git merge is equivalent to
    just doing git pull.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would use Google Drive or Dropbox's simplified version control. It's
    quite easy to synchronize since you can install an app that does it
    automatically. The downside is that the version control system is not easy
    to use. You have to do it manually on the website to be sure and you can
    not give a small description to the version.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would create a new branch if I am working on a new feature and I don't
    want to interfere with the running version of my program. Or I would like
    to work offline for some time. The upside of making changes to different
    branches is that the different versions of the program are better
    organized, so I might have a better overview of everything (nonlinear
    commit history). The upside of making changes  only in master is that the
    overall structure is easier to work on, you need less organization since
    e.g. you do not need to think about why and what to put in a new branch
    (linear commit history).
