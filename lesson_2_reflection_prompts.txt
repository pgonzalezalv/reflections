What happens when you initialize a repository? Why do you need to do it?

    No commit is created (since you have to give it a message yourself) but you
    create a .git folder which will contains the commits of the different files
    you want to commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area contains the files that you think are almost ready to be
    committed (they are added to that area once you use 'add <file_name>'). The
    working directory is the directory you are working, the files can be
    different from the staging area or the repository. The repository contains
    the last committed files (the last version).

How can you use the staging area to make sure you have one commit per logical
change?

    You add the files you want to commit by adding it to the staging area (with
    'git add <file_names>') and you verify if they correspond to the changes
    you want to commit by using 'git diff --staged' to make sure that it
    corresponds to 1 logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    If I would like to add a new feature while keeping the working commit as a
    branch (say as a working version of my program, so I can work on a new
    feature, while be able to showing a working version of my program) and
    maybe correcting bugs that would appear while adding this new branch.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
